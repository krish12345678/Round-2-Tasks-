@DefaultJsonAdapter(Book.class)
public class BookAdapter implements JsonAdapter<Book> {

  @Override
  public Book create(JsonElement jsonElement, JsonBuilder ctx) {
    final JsonObject json = jsonElement.asJsonObject();
    String name = json.get("title");
    String isbn = json.get("isbn");
    return BookManager.createBook(title, isbn);
  }


  @Override
  public Book update(JsonElement jsonElement, Book book, JsonBuilder ctx) {
    final JsonObject json = jsonElement.asJsonObject();
    String name = json.get("title");
    String isbn = json.get("isbn");
    return book.update(title, isbn);
  }
		
  @Override
  public JsonElement view(Book book, JsonBuilder ctx) {
    final JsonObject json = new JsonObject();
    json.addProperty("id", book.getExternalId());
    json.addProperty("title", book.getTitle());
    json.addProperty("isbn", book.getIsbn());
        return json;
  }
}
public class OrderResource extends BennuRestResource {

  @POST
  @Path("/orders")
  @Produces(MediaType.APPLICATION_JSON)
  public String createOrder(JsonElement jsonElement) {
    accessControl("#users");
    return create(jsonElement);
  }

  ...

}
